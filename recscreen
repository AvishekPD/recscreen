#!/bin/env bash
# --- By Kiriyama and Acidicneko ---

whenrec=$(date +"%d-%m-%y_%H-%M_")

mode="alsa"

OUTPUT=~/Videos/Screenrecord/"${whenrec}.mp4"

FR=30 

DELAY=0

deviceid=43

resolution=1366x768
scale=$resolution

TEMPDIR=~/.cache/recscreen

record_alsa () {
	ffmpeg \
		-use_wallclock_as_timestamps 1 \
		-f pulse -ac 2 -ar 44100 -i alsa_output.pci-0000_00_1f.3.analog-stereo.monitor \
		-f x11grab -r $FR -s $resolution -i :0.0 \
		-vf scale=$scale:flags=lanczos \
		-vcodec libx264 -preset veryfast \
		-acodec libmp3lame -ar 44100 -q:a 1 \
		-pix_fmt yuv420p \
		$TEMPDIR/temp.mp4
	
	ffmpeg \
    	-i $TEMPDIR/temp.mp4 \
    	-itsoffset $DEOFFSET \
    	-i $TEMPDIR/temp.mp4 \
    	-vcodec copy -acodec copy \
    	-map 0:0 -map 1:1 \
    	$OUTPUT
		
	rm -rf $TEMPDIR
}

record_pipewire () {
	pw-record --target $deviceid $TEMPDIR/audio.wav & \
	ffmpeg \
    	-f x11grab -framerate $FR -i :0.0 \
    	-vcodec libx264 -crf 7 \
    	-vf -s $resolution scale=$scale\
    	-preset superfast \
    	$TEMPDIR/video.mkv 

	ffmpeg \
    	-i $TEMPDIR/video.mkv -i $TEMPDIR/audio.wav \
    	-c:v copy -map 0:v:0 -map 1:a:0 -c:a aac -b:a 300k \
    	$OUTPUT

	rm -rf $TEMPDIR
}

help () {
	echo "Recscreen by Kiriyama"
	echo
	echo "[-h] show help menu"
	echo "[-p] use pipewire instead of alsa"
	echo "[-o OUTPUT ] specify output video name"
	echo "[-f FPS ] specify the number of Frames per Second"
	echo "[-d SECONDS] delay before recording in seconds"
	echo "[-r RESOLUTION ] specify the resolution in pixels in WIDTHxHEIGHT format"
	echo "[-s SCALE] scales up the final video to given resolution; defaults to RESOLUTION"
	echo
}

main () {

	if [ ! -d $TEMPDIR ] ; then
		mkdir -p ~/.cache/recscreen
	fi
	
	if [ ! -d ~/Videos/Screenrecord ] ; then
		mkdir -p ~/Videos/Screenrecord
	fi

	while getopts ":hpf:d:o:r:s:" options; do
		case "${options}" in
		h)
			help
			exit 0
			;;
		o)
			OUTPUT="${OPTARG}"
			;;
		f)
			FR="${OPTARG}"
			;;
		d)
			DELAY="${OPTARG}"
			;;
		p)
			mode="pipewire"
			;;
		r)
			resolution="${OPTARG}"
			;;
		s)
			scale="${OPTARG}"
			;;
		:)
			echo "Error: -${OPTARG} requires an argument."
			exit 1
			;;
		*)
			echo "Error: Unknown option -${OPTARG}."
			exit 1
			;;
		esac
	done
	if (( $DELAY < 10 )) ; then
		printf "Starting in  "
	else
		printf "Starting in %d" "$DELAY"
	fi

	for ((i = $DELAY ; i >= 0 ; i--))
	do
		if (( $DELAY < 10 )) ; then
			printf "\b%d" "$i"
		fi
		sleep 1
	done

	if [ "$mode" = "pipewire" ] ; then
		record_pipewire
	elif [ "$mode" = "alsa" ] ; then
		record_alsa
	fi
}

main $@
